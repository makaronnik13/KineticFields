//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/KineticCore/Resources/KineticCoreInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @KineticCoreInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @KineticCoreInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KineticCoreInput"",
    ""maps"": [
        {
            ""name"": ""Controllers"",
            ""id"": ""30556dfa-ac7d-4942-87ba-b9290bab753c"",
            ""actions"": [
                {
                    ""name"": ""RightClip"",
                    ""type"": ""Button"",
                    ""id"": ""73a1faf9-2028-4ef9-a5c3-5b33dd8846a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftClip"",
                    ""type"": ""Button"",
                    ""id"": ""5b710c01-77ea-41e7-a0d9-d962575e5562"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9e5aaee1-5396-4ed8-81c1-74d736755c02"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pc"",
                    ""action"": ""RightClip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f7bb6b20-ea60-44cd-acb8-08ccdc7c0b1b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pc"",
                    ""action"": ""LeftClip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Pc"",
            ""bindingGroup"": ""Pc"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Controllers
        m_Controllers = asset.FindActionMap("Controllers", throwIfNotFound: true);
        m_Controllers_RightClip = m_Controllers.FindAction("RightClip", throwIfNotFound: true);
        m_Controllers_LeftClip = m_Controllers.FindAction("LeftClip", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controllers
    private readonly InputActionMap m_Controllers;
    private List<IControllersActions> m_ControllersActionsCallbackInterfaces = new List<IControllersActions>();
    private readonly InputAction m_Controllers_RightClip;
    private readonly InputAction m_Controllers_LeftClip;
    public struct ControllersActions
    {
        private @KineticCoreInput m_Wrapper;
        public ControllersActions(@KineticCoreInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @RightClip => m_Wrapper.m_Controllers_RightClip;
        public InputAction @LeftClip => m_Wrapper.m_Controllers_LeftClip;
        public InputActionMap Get() { return m_Wrapper.m_Controllers; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllersActions set) { return set.Get(); }
        public void AddCallbacks(IControllersActions instance)
        {
            if (instance == null || m_Wrapper.m_ControllersActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControllersActionsCallbackInterfaces.Add(instance);
            @RightClip.started += instance.OnRightClip;
            @RightClip.performed += instance.OnRightClip;
            @RightClip.canceled += instance.OnRightClip;
            @LeftClip.started += instance.OnLeftClip;
            @LeftClip.performed += instance.OnLeftClip;
            @LeftClip.canceled += instance.OnLeftClip;
        }

        private void UnregisterCallbacks(IControllersActions instance)
        {
            @RightClip.started -= instance.OnRightClip;
            @RightClip.performed -= instance.OnRightClip;
            @RightClip.canceled -= instance.OnRightClip;
            @LeftClip.started -= instance.OnLeftClip;
            @LeftClip.performed -= instance.OnLeftClip;
            @LeftClip.canceled -= instance.OnLeftClip;
        }

        public void RemoveCallbacks(IControllersActions instance)
        {
            if (m_Wrapper.m_ControllersActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControllersActions instance)
        {
            foreach (var item in m_Wrapper.m_ControllersActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControllersActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControllersActions @Controllers => new ControllersActions(this);
    private int m_PcSchemeIndex = -1;
    public InputControlScheme PcScheme
    {
        get
        {
            if (m_PcSchemeIndex == -1) m_PcSchemeIndex = asset.FindControlSchemeIndex("Pc");
            return asset.controlSchemes[m_PcSchemeIndex];
        }
    }
    public interface IControllersActions
    {
        void OnRightClip(InputAction.CallbackContext context);
        void OnLeftClip(InputAction.CallbackContext context);
    }
}
